using MoodCode.Core.Models;

namespace MoodCode.Core.Services;

/// <summary>
/// –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–º–∏—Ç–æ–≤.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GitAnalyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ ICommitRewriter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
/// </summary>
public class CommitProcessor
{
    private readonly GitAnalyzer _gitAnalyzer;
    private readonly ICommitRewriter _commitRewriter;

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CommitProcessor.
    /// </summary>
    /// <param name="gitAnalyzer">–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Git –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.</param>
    /// <param name="commitRewriter">–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–º–∏—Ç–æ–≤.</param>
    public CommitProcessor(GitAnalyzer gitAnalyzer, ICommitRewriter commitRewriter)
    {
        _gitAnalyzer = gitAnalyzer ?? throw new ArgumentNullException(nameof(gitAnalyzer));
        _commitRewriter = commitRewriter ?? throw new ArgumentNullException(nameof(commitRewriter));
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    /// </summary>
    /// <param name="commitMessage">–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞.</param>
    /// <param name="repositoryPath">–ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é Git. –ï—Å–ª–∏ null, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</returns>
    /// <exception cref="InvalidOperationException">–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.</exception>
    public async Task<CommitAnalysis> AnalyzeCommitAsync(string commitMessage, string? repositoryPath = null)
    {
        if (string.IsNullOrEmpty(commitMessage))
            throw new ArgumentNullException(nameof(commitMessage));

        repositoryPath ??= _gitAnalyzer.GetCurrentRepositoryPath();

        if (!_gitAnalyzer.HasStagedChanges(repositoryPath))
        {
            throw new InvalidOperationException("No staged changes found. Please stage your changes first.");
        }

        var analysis = new CommitAnalysis
        {
            OriginalMessage = commitMessage,
            NeedsImprovement = _gitAnalyzer.IsBadCommitMessage(commitMessage),
            ModifiedFiles = _gitAnalyzer.GetModifiedFiles(repositoryPath),
            GitDiff = _gitAnalyzer.GetStagedDiff(repositoryPath)
        };

        if (analysis.NeedsImprovement)
        {
            Console.WriteLine("ü§ñ Generating improved commit message...");
            analysis.SuggestedMessage = await _commitRewriter.RewriteAsync(
                analysis.GitDiff, 
                analysis.OriginalMessage
            );
        }
        else
        {
            analysis.SuggestedMessage = analysis.OriginalMessage;
        }

        return analysis;
    }

    public void DisplayAnalysis(CommitAnalysis analysis)
    {
        Console.WriteLine();
        WriteColor("=== MoodCode Analysis ===", ConsoleColor.Cyan);
        
        if (analysis.NeedsImprovement)
        {
            WriteColor($"‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª: \"{analysis.OriginalMessage}\"", ConsoleColor.Red);
            WriteColor($"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: \"{analysis.SuggestedMessage}\"", ConsoleColor.Green);
            Console.WriteLine();
            WriteColor($"üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {string.Join(", ", analysis.ModifiedFiles)}", ConsoleColor.Yellow);
        }
        else
        {
            WriteColor($"‚úÖ –•–æ—Ä–æ—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: \"{analysis.OriginalMessage}\"", ConsoleColor.Green);
            WriteColor("–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö!", ConsoleColor.Green);
        }
        
        Console.WriteLine();
    }

    public bool PromptUserForApproval()
    {
        WriteColor("–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? [–î/–Ω/—Ä(–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)]: ", ConsoleColor.Yellow, inline: true);
        var input = Console.ReadLine()?.ToLowerInvariant().Trim();
        
        return input is "" or "y" or "yes" or "–¥" or "–¥–∞";
    }

    public string PromptUserForEdit(string currentMessage)
    {
        WriteColor($"–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {currentMessage}", ConsoleColor.Yellow);
        WriteColor("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ", ConsoleColor.Yellow, inline: true);
        var userInput = Console.ReadLine()?.Trim();
        
        return !string.IsNullOrEmpty(userInput) ? userInput : currentMessage;
    }

    private void WriteColor(string message, ConsoleColor color, bool inline = false)
    {
        Console.ForegroundColor = color;
        if (inline)
        {
            Console.Write(message);
        }
        else
        {
            Console.WriteLine(message);
        }
        Console.ResetColor();
    }
}
